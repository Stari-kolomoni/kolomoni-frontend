/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
    "/login": {
    /**
     * Create an access token.
     * @description This endpoint is the login method: it validates the credentials (username and password) and
     * gives the user an access token they can use in future requests to authenticate themselves.
     *
     * In addition to the access token, a refresh token is provided to the user so they can request
     * a new access token. The refresh token is valid for longer than the access token,
     * but only the access token can be used in the *Authorization* header. For login refreshing,
     * see the `POST /api/v1/login/refresh` endpoint.
     */
        post: operations["login"];
    };
    "/login/refresh": {
    /**
     * Refresh a user's access
     * @description The user must provide a refresh token given to them on an initial call to `/users/login`.
     * "Refreshing a login" does not invalidate the refresh token.
     *
     * The result of this is essentially a new JWT access token. Use when your initial access token
     * from `/users/login` expires.
     */
        post: operations["refresh_login"];
    };
    "/ping": {
    /** Ping the server. */
        get: operations["ping"];
    };
    "/users": {
    /**
     * List all registered users.
     * @description This endpoint returns a list of all registered users.
     *
     *
     * # Required permissions
     * This endpoint requires the `users.any:read` permission.
     */
        get: operations["get_all_registered_users"];
        /**
     * Register a new user
     * @description This endpoint registers a new user with the provided username, display name and password.
     * Only one user with the given username or display name can exist (both fields are required to be unique).
     *
     * No authentication is required.
     */
        post: operations["register_user"];
    };
    "/users/{user_id}": {
    /**
     * Get a specific user's information
     * @description This is a generic version of the `GET /users/me` endpoint, allowing you to see information
     * about users other than yourself.
     *
     * *This endpoint requires the `users.any:read` permission.*
     */
        get: operations["get_specific_user_info"];
    };
    "/users/{user_id}/display_name": {
    /**
     * Update a specific user's display name
     * @description This is generic version of the `PATCH /users/me/display_name` endpoint, allowing a user
     * with enough permissions to modify another user's display name.
     *
     * *This endpoint requires the `users.any:write` permission.*
     */
        patch: operations["update_specific_user_display_name"];
    };
    "/users/{user_id}/permissions": {
    /**
     * Get a specific user's permissions
     * @description This is a generic version of the `GET /users/me/permissions` endpoint, allowing you
     * to see others' permissions.
     *
     * *This endpoint requires the `users.any:read` permission.*
     */
        get: operations["get_specific_user_permissions"];
        /**
     * Add permissions to user
     * @description This endpoint allows users with enough permissions to add specific permissions to others.
     * You can add a specific permission to the requested user *only if you have that permission*.
     * If you do not, your request will be denied with a `403 Forbidden`.
     *
     * *This endpoint requires the `users.any:write` permission.*
     */
        post: operations["add_permissions_to_specific_user"];
        /**
     * Remove permissions from user
     * @description This endpoint allows user with enough permissions to remove specific permissions from others.
     * You can remove a specific permission from the requested user *only if you also have that permission*.
     * If you do not, your request will be denied with a `403 Forbidden`.
     *
     * *This endpoint requires the `users.any:write` permission.*
     */
        delete: operations["remove_permissions_from_specific_user"];
    };
    "/users/me": {
    /**
     * Get current user's information
     * @description This endpoint returns the logged-in user's information.
     *
     *
     * # Required permissions
     * This endpoint requires the `users.self:read` permission.
     */
        get: operations["get_current_user_info"];
    };
    "/users/me/display_name": {
    /**
     * Change the current user's display name
     * @description This endpoint allows you to change your own display name. Note that the display name
     * must be unique among all users, so your request may be denied with a `409 Conflict`
     * to indicate a display name collision.
     *
     * # Required permissions
     * This endpoint requires the `users.self:write` permission.
     */
        patch: operations["update_current_user_display_name"];
    };
    "/users/me/permissions": {
    /**
     * Get current user's permissions
     * @description # Required permissions
     * This endpoint requires the `users.self:read` permission.
     */
        get: operations["get_current_user_permissions"];
    };
}

export type webhooks = Record<string, never>;

export interface components {
    schemas: {
    /**
     * @description Simple JSON-encodable response containing a single field: a `reason`.
     *
     * This is useful for specifying reasons when returning a HTTP status code
     * with an error.
     */
        ErrorReasonResponse: {
            /** @description Error reason. */
            reason: string;
        };
        /**
     * @description User (API caller) request to change a user's display name.
     *
     * This struct is used as a request in the public API.
     */
        UserDisplayNameChangeRequest: {
            /** @description Display name to change to. */
            new_display_name: string;
        };
        /**
     * @description Response indicating successful change of a display name.
     * Contains the updated user information.
     *
     * This struct is used as a response in the public API.
     */
        UserDisplayNameChangeResponse: {
            user: components["schemas"]["UserInformation"];
        };
        /**
     * @description Information about one user in particular.
     *
     * This struct is used as a response in the public API.
     */
        UserInfoResponse: {
            user: components["schemas"]["UserInformation"];
        };
        /**
     * @description Information about a single user.
     *
     * This struct is used as part of a response in the public API.
     */
        UserInformation: {
            /** @description Unique display name. */
            display_name: string;
            /**
       * Format: int32
       * @description Internal user ID.
       */
            id: number;
            /**
       * Format: date-time
       * @description Registration date and time.
       */
            joined_at: string;
            /**
       * Format: date-time
       * @description Last activity date and time.
       */
            last_active_at: string;
            /**
       * Format: date-time
       * @description Last modification date and time.
       */
            last_modified_at: string;
            /** @description Unique username for login. */
            username: string;
        };
        /**
     * @description Response containing a list of active permissions.
     *
     * This struct is used as a response in the public API.
     */
        UserPermissionsResponse: {
            permissions: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

    /**
   * Create an access token.
   * @description This endpoint is the login method: it validates the credentials (username and password) and
   * gives the user an access token they can use in future requests to authenticate themselves.
   *
   * In addition to the access token, a refresh token is provided to the user so they can request
   * a new access token. The refresh token is valid for longer than the access token,
   * but only the access token can be used in the *Authorization* header. For login refreshing,
   * see the `POST /api/v1/login/refresh` endpoint.
   */
    login: {
        requestBody: {
            content: {
                /**
         * @example {
         *   "password": "verysecurepassword",
         *   "username": "sample_user"
         * }
         */
                "application/json": {
                    /** @description Password. */
                    password: string;
                    /** @description Username to log in as. */
                    username: string;
                };
            };
        };
        responses: {
            /** @description Login successful. */
            200: {
                content: {
                    "application/json": {
                        /** @description JWT access token. */
                        access_token: string;
                        /** @description JWT refresh token. */
                        refresh_token: string;
                    };
                };
            };
            /** @description Invalid login information. */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorReasonResponse"];
                };
            };
            /** @description Internal server error. */
            500: {
                content: never;
            };
        };
    };
    /**
   * Refresh a user's access
   * @description The user must provide a refresh token given to them on an initial call to `/users/login`.
   * "Refreshing a login" does not invalidate the refresh token.
   *
   * The result of this is essentially a new JWT access token. Use when your initial access token
   * from `/users/login` expires.
   */
    refresh_login: {
        requestBody: {
            content: {
                /**
         * @example {
         *   "refresh_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTdGFyaSBLb2xvbW9uaSIsInN1YiI6IkFQSSB0b2tlbiIsImlhdCI6MTY4Nzk3MTMyMiwiZXhwIjoxNjg4NTc2MTIyLCJ1c2VybmFtZSI6InRlc3QiLCJ0b2tlbl90eXBlIjoicmVmcmVzaCJ9.Ze6DI5EZ-swXRQrMW3NIppYejclGbyI9D6zmYBWJMLk"
         * }
         */
                "application/json": {
                    /**
           * @description Refresh token to use to generate an access token.
           *
           * Token must not have expired to work.
           */
                    refresh_token: string;
                };
            };
        };
        responses: {
            /** @description Login refresh successful. */
            200: {
                content: {
                    "application/json": {
                        /** @description Newly-generated access token to use in future requests. */
                        access_token: string;
                    };
                };
            };
            /** @description Invalid refresh token. */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorReasonResponse"];
                };
            };
            /** @description Refresh token has expired. */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorReasonResponse"];
                };
            };
            /** @description Internal server error. */
            500: {
                content: never;
            };
        };
    };
    /** Ping the server. */
    ping: {
        responses: {
            /** @description Server is alive and well. */
            200: {
                content: {
                    "application/json": {
                        ok: boolean;
                    };
                };
            };
        };
    };
    /**
   * List all registered users.
   * @description This endpoint returns a list of all registered users.
   *
   *
   * # Required permissions
   * This endpoint requires the `users.any:read` permission.
   */
    get_all_registered_users: {
        responses: {
            /** @description List of registered users. */
            200: {
                content: {
                    "application/json": {
                        users: components["schemas"]["UserInformation"][];
                    };
                };
            };
            /** @description Missing user authentication. */
            401: {
                content: never;
            };
            /** @description Missing `user.any:read` permission. */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorReasonResponse"];
                };
            };
            /** @description Internal server error. */
            500: {
                content: never;
            };
        };
    };
    /**
   * Register a new user
   * @description This endpoint registers a new user with the provided username, display name and password.
   * Only one user with the given username or display name can exist (both fields are required to be unique).
   *
   * No authentication is required.
   */
    register_user: {
        requestBody: {
            content: {
                /**
         * @example {
         *   "display_name": "Janez Novak",
         *   "password": "perica_reže_raci_rep",
         *   "username": "janeznovak"
         * }
         */
                "application/json": {
                    /** @description Name to display in the UI as. */
                    display_name: string;
                    /** @description Password for this user account. */
                    password: string;
                    /** @description Username to register as (not the same as the display name). */
                    username: string;
                };
            };
        };
        responses: {
            /** @description Registration successful. */
            200: {
                content: {
                    "application/json": {
                        user: components["schemas"]["UserInformation"];
                    };
                };
            };
            /** @description User with given username already exists. */
            409: {
                content: {
                    "application/json": components["schemas"]["ErrorReasonResponse"];
                };
            };
            /** @description Internal server error. */
            500: {
                content: never;
            };
        };
    };
    /**
   * Get a specific user's information
   * @description This is a generic version of the `GET /users/me` endpoint, allowing you to see information
   * about users other than yourself.
   *
   * *This endpoint requires the `users.any:read` permission.*
   */
    get_specific_user_info: {
        parameters: {
            path: {
                /** @description ID of the user to get information about. */
                user_id: number;
            };
        };
        responses: {
            /** @description User information. */
            200: {
                content: {
                    "application/json": components["schemas"]["UserInfoResponse"];
                };
            };
            /** @description Missing user authentication. */
            401: {
                content: never;
            };
            /** @description Missing `user.any:read` permission. */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorReasonResponse"];
                };
            };
            /** @description Requested user does not exist. */
            404: {
                content: never;
            };
            /** @description Internal server error. */
            500: {
                content: never;
            };
        };
    };
    /**
   * Update a specific user's display name
   * @description This is generic version of the `PATCH /users/me/display_name` endpoint, allowing a user
   * with enough permissions to modify another user's display name.
   *
   * *This endpoint requires the `users.any:write` permission.*
   */
    update_specific_user_display_name: {
        parameters: {
            path: {
                /** @description User ID. */
                user_id: number;
            };
        };
        requestBody: {
            content: {
                /**
         * @example {
         *   "new_display_name": "Janez Novak Veliki"
         * }
         */
                "application/json": components["schemas"]["UserDisplayNameChangeRequest"];
            };
        };
        responses: {
            /** @description User's display name changed. */
            200: {
                content: {
                    "application/json": components["schemas"]["UserDisplayNameChangeResponse"];
                };
            };
            /** @description Missing user authentication. */
            401: {
                content: never;
            };
            /** @description Missing `user.any:write` permission. */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorReasonResponse"];
                };
            };
            /** @description User with given display name already exists. */
            409: {
                content: {
                    "application/json": components["schemas"]["ErrorReasonResponse"];
                };
            };
            /** @description Internal server error. */
            500: {
                content: never;
            };
        };
    };
    /**
   * Get a specific user's permissions
   * @description This is a generic version of the `GET /users/me/permissions` endpoint, allowing you
   * to see others' permissions.
   *
   * *This endpoint requires the `users.any:read` permission.*
   */
    get_specific_user_permissions: {
        parameters: {
            path: {
                /** @description ID of the user to get permissions for. */
                user_id: number;
            };
        };
        responses: {
            /** @description User permissions. */
            200: {
                content: {
                    "application/json": components["schemas"]["UserPermissionsResponse"];
                };
            };
            /** @description Missing user authentication. */
            401: {
                content: never;
            };
            /** @description Missing `user.any:read` permission. */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorReasonResponse"];
                };
            };
            /** @description Requested user does not exist. */
            404: {
                content: never;
            };
            /** @description Internal server error. */
            500: {
                content: never;
            };
        };
    };
    /**
   * Add permissions to user
   * @description This endpoint allows users with enough permissions to add specific permissions to others.
   * You can add a specific permission to the requested user *only if you have that permission*.
   * If you do not, your request will be denied with a `403 Forbidden`.
   *
   * *This endpoint requires the `users.any:write` permission.*
   */
    add_permissions_to_specific_user: {
        parameters: {
            path: {
                /** @description ID of the user to add permissions to. */
                user_id: number;
            };
        };
        requestBody: {
            content: {
                /**
         * @example {
         *   "permissions_to_add": [
         *     "user.any:read",
         *     "user.any:write"
         *   ]
         * }
         */
                "application/json": {
                    permissions_to_add: string[];
                };
            };
        };
        responses: {
            /** @description Updated user permission list. */
            200: {
                content: {
                    "application/json": components["schemas"]["UserPermissionsResponse"];
                };
            };
            /** @description Invalid permission name. */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorReasonResponse"];
                };
            };
            /** @description Missing user authentication. */
            401: {
                content: never;
            };
            /** @description Not allowed to modify. */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorReasonResponse"];
                };
            };
            /** @description Internal server error. */
            500: {
                content: never;
            };
        };
    };
    /**
   * Remove permissions from user
   * @description This endpoint allows user with enough permissions to remove specific permissions from others.
   * You can remove a specific permission from the requested user *only if you also have that permission*.
   * If you do not, your request will be denied with a `403 Forbidden`.
   *
   * *This endpoint requires the `users.any:write` permission.*
   */
    remove_permissions_from_specific_user: {
        parameters: {
            path: {
                /** @description ID of the user to remove permissions from. */
                user_id: number;
            };
        };
        requestBody: {
            content: {
                /**
         * @example {
         *   "permissions_to_remove": [
         *     "user.any:write"
         *   ]
         * }
         */
                "application/json": {
                    permissions_to_remove: string[];
                };
            };
        };
        responses: {
            /** @description Updated user permission list. */
            200: {
                content: {
                    "application/json": components["schemas"]["UserPermissionsResponse"];
                };
            };
            /** @description Invalid permission name. */
            400: {
                content: {
                    "application/json": components["schemas"]["ErrorReasonResponse"];
                };
            };
            /** @description Missing user authentication. */
            401: {
                content: never;
            };
            /** @description Not allowed to modify. */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorReasonResponse"];
                };
            };
            /** @description Internal server error. */
            500: {
                content: never;
            };
        };
    };
    /**
   * Get current user's information
   * @description This endpoint returns the logged-in user's information.
   *
   *
   * # Required permissions
   * This endpoint requires the `users.self:read` permission.
   */
    get_current_user_info: {
        responses: {
            /** @description Information about current user. */
            200: {
                content: {
                    "application/json": components["schemas"]["UserInfoResponse"];
                };
            };
            /** @description Missing user authentication. */
            401: {
                content: never;
            };
            /** @description Missing `user.self:read` permission. */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorReasonResponse"];
                };
            };
            /** @description The user no longer exists. */
            404: {
                content: never;
            };
            /** @description Internal server error. */
            500: {
                content: never;
            };
        };
    };
    /**
   * Change the current user's display name
   * @description This endpoint allows you to change your own display name. Note that the display name
   * must be unique among all users, so your request may be denied with a `409 Conflict`
   * to indicate a display name collision.
   *
   * # Required permissions
   * This endpoint requires the `users.self:write` permission.
   */
    update_current_user_display_name: {
        requestBody: {
            content: {
                /**
         * @example {
         *   "new_display_name": "Janez Novak Veliki"
         * }
         */
                "application/json": components["schemas"]["UserDisplayNameChangeRequest"];
            };
        };
        responses: {
            /** @description Your display name has been changed. */
            200: {
                content: {
                    "application/json": components["schemas"]["UserDisplayNameChangeResponse"];
                };
            };
            /** @description Missing user authentication. */
            401: {
                content: never;
            };
            /** @description Missing `user.self:write` permission. */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorReasonResponse"];
                };
            };
            /** @description User with given display name already exists. */
            409: {
                content: {
                    "application/json": components["schemas"]["ErrorReasonResponse"];
                };
            };
            /** @description Internal server error. */
            500: {
                content: never;
            };
        };
    };
    /**
   * Get current user's permissions
   * @description # Required permissions
   * This endpoint requires the `users.self:read` permission.
   */
    get_current_user_permissions: {
        responses: {
            /** @description A list of your permissions. */
            200: {
                content: {
                    "application/json": components["schemas"]["UserPermissionsResponse"];
                };
            };
            /** @description Missing user authentication. */
            401: {
                content: never;
            };
            /** @description Missing `user.self:read` permission. */
            403: {
                content: {
                    "application/json": components["schemas"]["ErrorReasonResponse"];
                };
            };
            /** @description Internal server error. */
            500: {
                content: never;
            };
        };
    };
}
